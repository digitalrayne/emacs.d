#+PROPERTY: header-args :comments link

* emacs configuration
  
** configuration reload helper
   
   `C-x C-l`: reload this file.

#+BEGIN_SRC emacs-lisp
  (defun reload-config ()
    (interactive)
    (org-babel-load-file
    (expand-file-name "config.org"
                   user-emacs-directory))
    (load-file user-init-file)
    (princ "Configuration reloaded."))

  (global-set-key (kbd "C-x C-l") 'reload-config)
#+END_SRC

** specpdl and eval depth size

   Bump them up so we avoid issues with some LSP providers:
   
#+BEGIN_SRC emacs-lisp
    (setq max-specpdl-size 500
	  max-lisp-eval-depth 1000)
#+END_SRC

** add some extra paths

   Under OSX we need /usr/local/bin and friends so we can find git

#+BEGIN_SRC emacs-lisp
(setq exec-path (append exec-path '("/usr/local/bin" "/opt/homebrew/bin" "/usr/bin")))
#+END_SRC

** key bindings for OSX

   Set up modifiers to be consistent on OSX with the emacs-mac tapped version of emacs

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq
     frame-resize-pixelwise t
     menu-bar-mode t
     mac-command-modifier 'super
     mac-option-modifier 'meta
     mac-control-modifier 'control))
#+END_SRC

#+RESULTS:
: control

** package management
   
   Package installation is idempotent, using `use-package`.

*** repos
    
    Add the GNU, ELPA, MELPA, MELPA-stable, Marmalade and Org repos.
    
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			   ("elpa" . "http://tromey.com/elpa/")
			   ("melpa" . "http://melpa.org/packages/")
			   ("melpa-stable" . "http://stable.melpa.org/packages/")
			   ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

*** use-package
    
    Set up use-package for organsing package configuration.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t
	  use-package-expand-minimally t))
#+END_SRC

** look 'n feel
*** GUI tweaks   
    
    Disable GUI bits, load the monokai theme, and change the base font.
    Also enables global line mode to highlight the current line.
    
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1) (tool-bar-mode -1) (scroll-bar-mode -1)
  (if (eq system-type 'darwin)
    (set-frame-font "Fantasque Sans Mono-14" nil t)
    (set-frame-font "Fantasque Sans Mono-12" nil t))
  (global-hl-line-mode 1)
#+END_SRC

*** theme
    
#+BEGIN_SRC emacs-lisp    
  (use-package modus-themes
    :ensure t
    :config
    (load-theme 'modus-vivendi t)
    (custom-theme-set-faces
     'modus-vivendi
     '(org-level-1 ((t (:weight semi-bold :height 2.0))))
     '(org-level-2 ((t (:weight semi-bold :height 1.5))))
     '(org-level-3 ((t (:weight semi-bold :height 1.25))))
     '(org-level-4 ((t (:weight semi-bold :height 1.0)))))
  )
#+END_SRC

*** title line
    
    What to show at the top (window frame) of buffers.

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format
     (list (format "%s %%S: %%j " (system-name))
       '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
#+END_SRC

** env

   Set environment variables and PATH, as well as loading `exec-env-from-shell` to grab environment variables set by zsh.

#+BEGIN_SRC emacs-lisp
  ;; set the below so tmux knows not to load when we eval .zshrc
  ;; this is respected by ohmyzsh's tmux plugin
  (setenv "EMACS" "1")
  (use-package exec-path-from-shell
    :init
    (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize)
  ;; extra environment variables to bring in, in addition to the standard ones like PATH
       (exec-path-from-shell-copy-env "GOPATH")
       (exec-path-from-shell-copy-env "GOBIN")
       (exec-path-from-shell-copy-env "GOFLAGS")))
#+END_SRC

** startup

    Boot into org, with the Org scratch space loaded.
    
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message nil)
#+END_SRC

** global keybindings

   Some binds and unbinds that I find useful.

#+BEGIN_SRC emacs-lisp
  ;; this was a really fucking annoying process, I finally worked out this shortcut was how I was locking up emacs.
  (global-unset-key (kbd "C-z"))
#+END_SRC

** disable backup files

   Yeah, yeah. I'm sure I'll regret this.
   
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files  
#+END_SRC

** which key?

   Show possible keybinds as you try desperately to find them.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t)
#+END_SRC

** vterm

   Terminal

#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :ensure t)
#+END_SRC

** whitespace

   Ugh, whitespace.

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :ensure t
    :hook (prog-mode . ws-butler-mode))
#+END_SRC

** major modes

   High level additional config for major modes to use.
   Here we map filetypes to major modes, for example.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.mdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.sh\\'" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.ledger\\'" . hledger-mode))
  (add-to-list 'auto-mode-alist '("\\.adoc\\'" . adoc-mode))
  (add-to-list 'auto-mode-alist '("\\.asciidoc\\'" . adoc-mode))
#+END_SRC

** org mode

   Base configuration for Org Mode

*** use-package

    Start the use-package section for org mode configuration to make sure org is loaded before configuring it.
    
#+BEGIN_SRC emacs-lisp
  (use-package org
	     :config
	   )
#+END_SRC
   
*** org directories

    Set standard directories for Org files.
    
#+BEGIN_SRC emacs-lisp
  (setq org-directory
	(cond
	 ((eq system-type 'darwin)
	  "~/Library/Mobile Documents/com~apple~CloudDocs/Org/")
	 ((eq system-type 'gnu/linux)
	  "~/Org")))  
  (setq org-agenda-files
	(cond
	 ((eq system-type 'darwin)
	  "~/Library/Mobile Documents/com~apple~CloudDocs/Org/")
	 ((eq system-type 'gnu/linux)
	  "~/Org")))  
  (setq org-default-notes-file
	(cond
	 ((eq system-type 'darwin)
	  "~/Library/Mobile Documents/com~apple~CloudDocs/Org/TODO.org")
	 ((eq system-type 'gnu/linux)
	  "~/Org/TODO.org")))
#+END_SRC

** development
*** git

    Set up magit for magic git things.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)
         ("C-x C-g" . magit-status)))
#+END_SRC	 

*** projectile

    Projectile, for dealing with project folders.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t)
#+END_SRC

*** company

    Company, for completion.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure
    :custom
    (company-idle-delay 0.5) ;; how long to wait until popup
    ;; (company-begin-commands nil) ;; uncomment to disable popup
    :bind
    (:map company-active-map
      ("C-n". company-select-next)
      ("C-p". company-select-previous)
      ("M-<". company-select-first)
      ("M->". company-select-last))
    (:map company-mode-map
      ("<tab>". tab-indent-or-complete)
      ("TAB". tab-indent-or-complete)))
    :config
    (setq
       company-minimum-prefix-length 1
       company-idle-delay 0.0
       company-tooltip-align-annotations t)

    (defun check-expansion ()
      (save-excursion
      (if (looking-at "\\_>") t
        (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
      (if (looking-at "::") t nil)))))
     
#+END_SRC
    
*** flycheck

    Flycheck, for on the fly syntax checking.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :ensure t)
#+END_SRC
    
*** lsp mode

    Configure language server support for syntax highlighting and code formatting.
    Some settings in lsp-mode use defcustom to define variables - in this case using setq in :config doesn't seem to work.

**** TODO Ruby via solargraph
    
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure
    :commands lsp
    :init
    (setq lsp-keymap-prefix "C-c l"
      lsp-modeline-diagnostics-enable t
      lsp-file-watch-threshold nil
      lsp-enable-file-watchers t
      lsp-print-performance nil
      lsp-idle-delay 0.6
      lsp-eldoc-render-all t
      company-minimum-prefix-length 1
      company-idle-delay 0.0
      company-tooltip-align-annotations t
      lsp-rust-analyzer-server-display-inlay-hints t
      lsp-rust-analyzer-proc-macro-enable t
      lsp-rust-analyzer-server-command (list (replace-regexp-in-string "\n$" "" (shell-command-to-string "rustup which rust-analyzer")))
      lsp-clangd-binary-path "/System/Volumes/Data/Library/Developer/CommandLineTools/usr/bin/clangd"
      lsp-go-gopls-server-path "~/.go/bin/gopls"
      lsp-pylsp-server-command "~/.pyenv/versions/emacs39/bin/pylsp")
    :config
    (lsp-register-custom-settings
     '(("gopls.completeUnimported" t t)
       ("gopls.staticcheck" t t)))

    (with-eval-after-load 'lsp-mode
      (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)))

  (use-package lsp-ui
     :ensure
     :commands lsp-ui-mode
     :config
     (setq lsp-ui-peek-always-show t
      lsp-ui-sideline-show-hover nil
      lsp-ui-doc-enable nil))
#+END_SRC

*** rust

    Enable rust mode, hook to lsp.

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure
    :bind
      (:map rust-mode-map
	("M-j" . lsp-ui-imenu)
	("M-?" . lsp-find-references)
	("C-c C-c l" . flycheck-list-errors)
	("C-c C-c a" . lsp-execute-code-action)
	("C-c C-c r" . lsp-rename)
	("C-c C-c q" . lsp-workspace-restart)
	("C-c C-c Q" . lsp-workspace-shutdown)
	("C-c C-c s" . lsp-rust-analyzer-status))
    :hook ((rust-mode . lsp-deferred)))

#+END_SRC

*** clang / c
    Enable clang for c support

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook (c-mode . lsp-deferred))
#+END_SRC

*** golang

    Enable go mode, hook to lsp.

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :hook ((go-mode . lsp-deferred)))
#+END_SRC
    
*** python

    Use python mode, hook to lsp.

#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :ensure t
    :hook ((python-mode . lsp-deferred)))
#+END_SRC
    
*** yaml

    Some YAML formatting configuration.

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :init
    (add-hook 'yaml-mode-hook
	(lambda ()
		(define-key yaml-mode-map "\C-m" 'newline-and-indent))))
#+END_SRC
