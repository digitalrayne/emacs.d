#+PROPERTY: header-args :comments link

* Emacs configuration
  
** Configuration reload helper
   
   `C-x C-l`: reload this file.

#+BEGIN_SRC emacs-lisp
  (defun reload-config ()
    (interactive)
    (org-babel-load-file
    (expand-file-name "config.org"
                   user-emacs-directory))
    (load-file user-init-file)
    (princ "Configuration reloaded."))

  (global-set-key (kbd "C-x C-l") 'reload-config)
#+END_SRC

** Tune specpdl and eval depth size

Bump them up so we avoid issues with some LSP providers:
   
#+BEGIN_SRC emacs-lisp
    (setq max-specpdl-size 500
	  max-lisp-eval-depth 1000)
#+END_SRC

** Set minimum native-comp warning level

#+begin_src emacs-lisp
  (setq warning-minimum-level :error)
#+end_src

** Add some useful OS PATHs

Under OSX we need /usr/local/bin and friends so we can find git

#+BEGIN_SRC emacs-lisp
(setq exec-path (append exec-path '("/usr/local/bin" "/opt/homebrew/bin" "/usr/bin")))
#+END_SRC

** Set key bindings for OSX

Set up modifiers to be consistent on OSX with the emacs-mac tapped version of emacs

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq
     frame-resize-pixelwise t
     menu-bar-mode t
     mac-command-modifier 'super
     mac-option-modifier 'meta
     mac-control-modifier 'control))
#+END_SRC

#+RESULTS:
: control

** Package management
   
Package installation is idempotent, using `use-package`.

*** Repos
    
Add the GNU, ELPA, MELPA, MELPA-stable, Marmalade and Org repos.
    
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			   ("elpa" . "http://tromey.com/elpa/")
			   ("melpa" . "http://melpa.org/packages/")
			   ("melpa-stable" . "http://stable.melpa.org/packages/")
			   ("org" . "http://orgmode.org/elpa/")))
#+END_SRC

*** Set up use-package
    
Set up use-package for organising package configuration.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t
	  use-package-expand-minimally t))
#+END_SRC

** Look 'n feel
*** Icons

Install a bunch of icons. Note, you need to run `all-the-icons-install-fonts` if the fonts are not already installed.
    
#+begin_src emacs-lisp
      (use-package all-the-icons
	:if (display-graphic-p)
	:ensure t)
#+end_src

*** GUI tweaks   
    
Disable GUI bits, load the monokai theme, and change the base font.
Also enables global line mode to highlight the current line.
    
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1) (tool-bar-mode -1) (scroll-bar-mode -1)
  (if (eq system-type 'darwin)
    (set-frame-font "Sarasa Mono J-14:Regular" nil t)
    (set-frame-font "Sarasa Mono J-12:Regular" nil t))
  (global-hl-line-mode 1)
#+END_SRC

*** Theme
    
#+BEGIN_SRC emacs-lisp    
  (use-package modus-themes
    :ensure t
    :config
    (load-theme 'modus-vivendi t)
    (custom-theme-set-faces
     'modus-vivendi
     '(org-level-1 ((t (:weight semi-bold :height 2.0))))
     '(org-level-2 ((t (:weight semi-bold :height 1.5))))
     '(org-level-3 ((t (:weight semi-bold :height 1.25))))
     '(org-level-4 ((t (:weight semi-bold :height 1.0)))))
  )
#+END_SRC

*** Title line
    
What to show at the top (window frame) of buffers.

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format
     (list (format "%s %%S: %%j " (system-name))
       '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
#+END_SRC

** startup

Boot into org, with the Org scratch space loaded.
    
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message nil)
#+END_SRC

** global keybindings

   Some binds and unbinds that I find useful.

#+BEGIN_SRC emacs-lisp
  ;; this was a really fucking annoying process, I finally worked out this shortcut was how I was locking up emacs.
  (global-unset-key (kbd "C-z"))
#+END_SRC

** disable backup files

   Yeah, yeah. I'm sure I'll regret this.
   
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files  
#+END_SRC

** which key?

   Show possible keybinds as you try desperately to find them.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))  
#+END_SRC

** vterm

   Terminal

#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :ensure t)
#+END_SRC

** whitespace

   Ugh, whitespace.

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :ensure t
    :hook (prog-mode . ws-butler-mode))
#+END_SRC

** major modes

   High level additional config for major modes to use.
   Here we map filetypes to major modes, for example.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.mdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.sh\\'" . shell-script-mode))
  (add-to-list 'auto-mode-alist '("\\.ledger\\'" . hledger-mode))
  (add-to-list 'auto-mode-alist '("\\.adoc\\'" . adoc-mode))
  (add-to-list 'auto-mode-alist '("\\.asciidoc\\'" . adoc-mode))
#+END_SRC

** org mode

   Base configuration for Org Mode

*** use-package

    Start the use-package section for org mode configuration to make sure org is loaded before configuring it.
    
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    )
#+END_SRC
   
*** org directories

    Set standard directories for Org files.
    
#+BEGIN_SRC emacs-lisp
  (setq org-directory
	  "~/Org")
  (setq org-agenda-files
	  '("~/Org"))
  (setq org-default-notes-file
	  "~/Org/TODO.org")
#+END_SRC

*** org inline images

#+BEGIN_SRC emacs-lisp
  (setq org-startup-with-inline-images t)  
#+END_SRC

*** org mermaid

#+BEGIN_SRC emacs-lisp
    (use-package ob-mermaid
      :config
      (org-babel-do-load-languages
      'org-babel-load-languages
      '((mermaid . t)
	(scheme . t)))
    )
    (add-hook 'org-babel-after-execute-hook
	      (lambda ()
		(org-redisplay-inline-images)))

#+END_SRC


** development
*** git

    Set up magit for magic git things.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)
         ("C-x C-g" . magit-status)))
#+END_SRC	 

*** projectile

    Projectile, for dealing with project folders.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :pin melpa-stable
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))  
#+END_SRC

*** flymake

    Configure flymake

#+begin_src emacs-lisp
  (use-package flymake
    :ensure nil
    :config
    (define-key flymake-mode-map (kbd "M-n") 'flymake-goto-next-error)
    (define-key flymake-mode-map (kbd "M-p") 'flymake-goto-prev-error))
#+end_src

*** rust mode

    Enable rust mode, hook to lsp.

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t)
#+END_SRC

*** LSP (lsp-mode)

    Configure language server support for syntax highlighting and code formatting.
    I tried eglot, but inlay hints were not supported for Rust which is a deal breaker.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook ((go-mode . lsp)
	   (ruby-mode . lsp)
	   (rust-mode . lsp)
	   (python-mode . lsp)
	   (c-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp
    :bind
    (("C-c C-c r" . lsp-restart-workspace))
    :init
    (setq lsp-keymap-prefix "C-c l"
	  lsp-modeline-diagnostics-enable t
	  lsp-file-watch-threshold nil
	  lsp-enable-file-watchers t
	  lsp-print-performance nil
	  lsp-idle-delay 0.6
	  lsp-eldoc-render-all t
	  lsp-rust-analyzer-server-display-inlay-hints t
	  lsp-rust-analyzer-proc-macro-enable t
	  lsp-rust-analyzer-server-command (list (replace-regexp-in-string "\n$" "" (shell-command-to-string "rustup which rust-analyzer")))
	  lsp-clangd-binary-path "/System/Volumes/Data/Library/Developer/CommandLineTools/usr/bin/clangd"
	  lsp-go-gopls-server-path "~/.go/bin/gopls"
	  lsp-pylsp-server-command "~/.pyenv/versions/emacs39/bin/pylsp")
    :config
    (lsp-register-custom-settings
     '(("gopls.completeUnimported" t t)
       ("gopls.staticcheck" t t)
       ("gopls.matcher" "CaseSensitive"))))

  (use-package lsp-ui :commands lsp-ui-mode)

#+END_SRC

*** flycheck

Flycheck, for syntax checking.

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :bind
    (("C-c C-c l" . flycheck-list-errors)
     ("C-c C-c n" . flycheck-next-error)
     ("C-c C-c p" . flycheck-previous-error)
     ("C-c C-c 1" . flycheck-first-error)))
#+end_src

*** company

Company, for completion.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :after eglot
    :hook (eglot-managed-mode . company-mode)
    :custom
    (company-idle-delay 0.5) ;; how long to wait until popup
    ;; (company-begin-commands nil) ;; uncomment to disable popup
    :bind
    (:map company-active-map
	  ("C-n". company-select-next)
	  ("C-p". company-select-previous)
	  ("M-<". company-select-first)
	  ("M->". company-select-last))
    :config
    (setq
     company-minimum-prefix-length 1
     company-idle-delay 0.0
     company-tooltip-align-annotations t
     tab-always-indent 'complete)

    (defun check-expansion ()
      (save-excursion
      (if (looking-at "\\_>") t
	(backward-char 1)
      (if (looking-at "\\.") t
	(backward-char 1)
      (if (looking-at "::") t nil))))))

#+END_SRC

*** yaml

    Some YAML formatting configuration.

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :init
    (add-hook 'yaml-mode-hook
	(lambda ()
		(define-key yaml-mode-map "\C-m" 'newline-and-indent))))
#+END_SRC

** comms

*** mail (mu4e)



*** mastodon

Set up our emacs mastodon client because really, this is how it must be. It must.

#+begin_src emacs-lisp
	(use-package mastodon
	  :ensure t
	  :config
	  (setq mastodon-instance-url "https://"
	    mastodon-active-user "ec0"))
#+end_src

*** matrix

Set up ement for matrix in emacs

#+begin_src emacs-lisp
	(use-package ement
	  :ensure t)
#+end_src

** m...music?
*** mpdel

I use mpd for playing music, and mpdel is a tidy way to drive it via emacs.

#+begin_src emacs-lisp
  (use-package mpdel
    :ensure t)
#+end_src

** dashboard
*** a nice dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
    (setq
     initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
     dashboard-set-footer nil
     dashboard-projects-backend 'projectile
     dashboard-set-init-info t
     dashboard-set-navigator t
     dashboard-set-heading-icons t
     dashboard-set-file-icons t
     dashboard-items '((recents  . 5)
		       (bookmarks . 5)
		       (projects . 5)
		       (agenda . 5)
		       (registers . 5)))
#+end_src
